(function() {
	var CompBase = {
          declare : {
              'tagName' : 'myinput',
              'template' : '<input yid="myinp"></input>',
              'replace' : true,
              'noneVisible' : false,
              'isDataSource' : false,
              'type' : 'DHTML',
              'version' : '1.0',
              'description' : 'Custom Component Descriprion'
          },
          properties : {
              'id' : {
                  'type' : typeof(''),
                  'readonly' : false,
                  'defaultValue' : ''
              },
              'value' : {
                  'type' : typeof(''),
                  'readonly' : false,
                  'defaultValue' : ''
              },
              'name' : {
                  'type' : typeof(''),
                  'readonly' : false,
                  'defaultValue' : ''
              },
              'style' : {
                  'type' : typeof(''),
                  'readonly' : false,
                  'defaultValue' : ''
              }
          },
          methods : {
              'getValue' : {
                  'argumentCheck' : false,
                  'argumentDefine' : {

                  },
                  'methodCode' : function ($args) {

                    return this.value;				   	   // 현재 value 리턴
                }
              },
              'setValue' : {
                  'argumentCheck' : false,
                  'argumentDefine' : {
                      'value' : {
                          'type' : typeof(''),
                          'defaultValue' : ''
                      }
                  },
                  'methodCode' : function ($args) {

                    this.child.myinp.value = $args.value;	// 객체에 value 세팅
                    this.value = $args.value; 				// 속성값 변경
                }
              }
          },
          controls : {

          },
          events : {

          },
          watches : {
              'myinp' : 'id,value,name,style'
          },
          dataLink : {

          },
          initialize : function ($yelem, $attrs) {
            /*--------------------------------------------------------------------------------
                 $yelem : Gets the component object. (컴포넌트 객체를 가져옵니다.)
                 $attrs : You can get property values of component objects. (컴포넌트 객체의 속성 값을 가져올 수 있습니다.)
                          (ex) $attrs.propName1 (Also available as this.propName1.) ( this.propName1 로도 사용 가능합니다. )
             --------------------------------------------------------------------------------*/

            // script code

            /* Value Setting */
            if (this.value) { this.child.myinp.value = this.value; }

            /* Name Setting */
            if (this.name) { $(this.child.myinp).attr('name',this.name); }

            /* Style Setting */
            if ((this.styleText !== undefined)&&(this.styleText.replace(/ /g,'')!=='')) { $(this.child.myinp).attr('style',this.styleText);}
            this.styleText = $(this.child.myinp)[0].style.cssText;

            /* Container */
            this.container = this.child.myinp;

        },
          propertyChange : function (propName, oldValue, newValue) {
            /*--------------------------------------------------------------------------------
                 propName : The name of the property to be changed. (변경되는 속성의 이름)
                 oldValue : Value of the property before it is changed (변경되기 전 해당 속성의 값)
                 newValue : The value to be changed (변경되려는 값)
             --------------------------------------------------------------------------------*/

            // script code
        },
          elementChange : function (childName, $childElem, propName, oldValue, newValue) {
            /*--------------------------------------------------------------------------------
                 childName  : Element name of changed attribute = child['name'] (변경된 속성의 Element 이름 = child['이름'])
                 $childElem : Element of changed attribute (actual object) (변경된 속성의 Element (실제 객체))
                 propName   : Changed Attribute Name (변경된 속성 이름)
                 oldValue   : Value before change (속성의 변경되기 이전 값)
                 newValue   : Changed value (속성의 변경된 값)
             --------------------------------------------------------------------------------*/

            // script code
        },
          dsoDataChange : function (dso, dsoName, fldName, oldValue, newValue) {
            /*--------------------------------------------------------------------------------
                 dso      : DSO to be changed (변경되는 DSO)
                 dsoName  : DSO name to be changed (변경되는 DSO 이름)
                 fldName  : The field name of the DSO to be changed. (변경되는 DSO의 Field 이름)
                 oldValue : Data value before change (변경되기 전 데이타 값)
                 newValue : The data value to be changed (변경되려는 데이타 값)
             --------------------------------------------------------------------------------*/

            // script code
        },
          setStyleProp : function(pName, pValue) {
            if ($waiRTL.checkKeyArr(pName, [])) { // Style properties you want to set. Set as ['fontSize', 'color']. (설정하고자 하는 스타일 속성 설정. ['fontSize', 'color'] 와 같이 설정)

            } else {

            }

            this.child.myinp.style[pName] = pValue;
            this.styleText = this.child.myinp.style;

            // console.log('setStyleProp : this.child.ydate.style['+pName+'] <-- '+pValue);
        },
          getStyleProp : function(pName) {
            var ret = undefined;
            if ($waiRTL.checkKeyArr(pName, [])) { // Attributes to get style property values. Set as ['backgroundColor', 'color']. (스타일 속성값을 가져올 속성 설정. ['backgroundColor', 'color'] 와 같이 설정)

            } else {

            }

            ret = this.child.myinp.style[pName];

            // console.log('getStyleProp : this.child.ydate.style['+pName+'] --> '+ret);
            return ret;
        },
          destroy : function($elem, $attrs) {
            /*--------------------------------------------------------------------------------
                 $yelem : Gets the component object. (컴포넌트 객체를 가져옵니다.)
                 $attrs : You can get property values of component objects. (컴포넌트 객체의 속성 값을 가져올 수 있습니다.)
                          (ex) $attrs.propName1
             --------------------------------------------------------------------------------*/

            // script code
        }
	};
	$wai.core.addComponentBase(CompBase);
})();